top_annotation = NULL,
column_order = rownames(my_ann), # sort your sample as your subtype order
#right_annotation = rowAnnotation(bar3 = right_anno),
row_order = mut.order, # sort mutation as mutation frequency
show_pct = T, #show percentage in left
column_title = "", # no title shown
show_heatmap_legend=T, # show legend in the oncoprint
column_split = my_ann$Subtype,
# some detailed size below and you may not have to change it
column_title_gp = gpar(fontsize = 8),
row_names_gp = gpar(fontsize = 8),
column_names_gp = gpar(fontsize = 8))
p
mut <- apply(m0, c(1,2), function(x) sample(c(0,1),1))
library(ComplexHeatmap)
r <- 10
c <- 100
m0 <- matrix(0, r, c)
set.seed(1)
mut <- apply(m0, c(1,2), function(x) sample(c(0,1),1))
dimnames(onco.input) <- list(paste0("G",1:10),paste0("P",1:100))
phenotype <- data.frame(rep(c("A","B","C","D"),c(20,30,10,40)),
row.names = colnames(mut))
mut.order <- names(sort(rowSums(mut),decreasing = T))
onco.input <- mut
library(ComplexHeatmap)
r <- 10
c <- 100
m0 <- matrix(0, r, c)
set.seed(1)
mut <- apply(m0, c(1,2), function(x) sample(c(0,1),1))
dimnames(mut) <- list(paste0("G",1:10),paste0("P",1:100))
phenotype <- data.frame(rep(c("A","B","C","D"),c(20,30,10,40)),
row.names = colnames(mut))
mut.order <- names(sort(rowSums(mut),decreasing = T))
onco.input <- mut
onco.input[onco.input == 1] <- "Mutated"
onco.input[onco.input != "Mutated"] <- ""
alter_fun = list(
background = function(x, y, w, h) {
grid.rect(x, y, w-unit(0.5, "mm"), h-unit(0.5, "mm"), gp = gpar(fill = "#dcddde", col = "#dcddde"))
},
Mutated = function(x, y, w, h) {
grid.rect(x, y, w-unit(0.5, "mm"), h-unit(0.5, "mm"), gp = gpar(fill = "#A60000", col = "#A60000"))
}
)
my_ann <- data.frame(Subtype = rep(c("A","B","C","D"),c(20,30,10,40)),
row.names = rownames(phenotype))
my_annotation = HeatmapAnnotation(df = my_ann,
col = list(Subtype = c("A" = "red","B" = "green","C" = "blue","D" = "yellow")))
mut
phenotype <- data.frame(Subtype = rep(c("A","B","C","D"),c(20,30,10,40)),
row.names = colnames(mut))
mut$Subtype <- phenotype$Subtype
phenotype$Subtype
mut$Subtype
mut
tmp <- as.data.frame(t(mut))
library(ComplexHeatmap)
r <- 10
c <- 100
m0 <- matrix(0, r, c)
set.seed(1)
mut <- apply(m0, c(1,2), function(x) sample(c(0,1),1))
dimnames(mut) <- list(paste0("G",1:10),paste0("P",1:100))
phenotype <- data.frame(Subtype = rep(c("A","B","C","D"),c(20,30,10,40)),
row.names = colnames(mut))
mut.order <- names(sort(rowSums(mut),decreasing = T))
onco.input <- mut
onco.input[onco.input == 1] <- "Mutated"
onco.input[onco.input != "Mutated"] <- ""
alter_fun = list(
background = function(x, y, w, h) {
grid.rect(x, y, w-unit(0.5, "mm"), h-unit(0.5, "mm"), gp = gpar(fill = "#dcddde", col = "#dcddde"))
},
Mutated = function(x, y, w, h) {
grid.rect(x, y, w-unit(0.5, "mm"), h-unit(0.5, "mm"), gp = gpar(fill = "#A60000", col = "#A60000"))
}
)
my_ann <- data.frame(Subtype = rep(c("A","B","C","D"),c(20,30,10,40)),
row.names = rownames(phenotype))
my_annotation = HeatmapAnnotation(df = my_ann,
col = list(Subtype = c("A" = "red","B" = "green","C" = "blue","D" = "yellow")))
tmp <- as.data.frame(t(mut))
tmp$Subtype <- phenotype$Subtype
tmp
pct <- NULL
for (i in mut.order) {
tmp1 <- tmp[,c(i,"Subtype")]
tmp1 <- as.data.frame.array(table(tmp1[,1],tmp1$CMOIC))[2,]/sum(tmp1[,1])
pct <- rbind.data.frame(pct,tmp1)
}
tmp <- as.data.frame(t(mut))
tmp$Subtype <- phenotype$Subtype
pct <- NULL
for (i in mut.order) {
tmp1 <- tmp[,c(i,"Subtype")]
tmp1 <- as.data.frame.array(table(tmp1[,1],tmp1$Subtype))[2,]/sum(tmp1[,1])
pct <- rbind.data.frame(pct,tmp1)
}
pct
rownames(pct) <- mut.order
right_anno <- anno_barplot(as.matrix(pct),which = "row",border = FALSE,gp = gpar(fill = c("red","green","blue","yellow"),border =NA,lty="blank"),height = unit(3, "cm"))
p <- oncoPrint(onco.input[,rownames(my_ann)], # this is the detailed mutation matrix
alter_fun = alter_fun,  # this is the alteration function we already set
bottom_annotation = NULL, # this is the annotation bar which was put bottom
top_annotation = NULL,
column_order = rownames(my_ann), # sort your sample as your subtype order
right_annotation = rowAnnotation(bar3 = right_anno),
row_order = mut.order, # sort mutation as mutation frequency
show_pct = T, #show percentage in left
column_title = "", # no title shown
show_heatmap_legend=T, # show legend in the oncoprint
column_split = my_ann$Subtype,
# some detailed size below and you may not have to change it
column_title_gp = gpar(fontsize = 8),
row_names_gp = gpar(fontsize = 8),
column_names_gp = gpar(fontsize = 8))
p
draw(right_anno)
draw(right_anno)
p <- oncoPrint(onco.input[,rownames(my_ann)], # this is the detailed mutation matrix
alter_fun = alter_fun,  # this is the alteration function we already set
bottom_annotation = NULL, # this is the annotation bar which was put bottom
top_annotation = NULL,
column_order = rownames(my_ann), # sort your sample as your subtype order
right_annotation = rowAnnotation(bar3 = right_anno),
row_order = mut.order, # sort mutation as mutation frequency
show_pct = T, #show percentage in left
column_title = "", # no title shown
show_heatmap_legend=T, # show legend in the oncoprint
column_split = my_ann$Subtype,
# some detailed size below and you may not have to change it
column_title_gp = gpar(fontsize = 8),
row_names_gp = gpar(fontsize = 8),
column_names_gp = gpar(fontsize = 8))
p
r <- 10
c <- 100
m0 <- matrix(0, r, c)
set.seed(1)
mut <- apply(m0, c(1,2), function(x) sample(c(0,1),1))
hclust(mut)
hclust(as.dist(mut))
group <- hclust(as.dist(t(mut)))
as.dist(t(mut))
r <- 10
c <- 100
m0 <- matrix(0, r, c)
set.seed(1)
mut <- apply(m0, c(1,2), function(x) sample(c(0,1),1))
group <- hclust(as.dist(t(mut)))
group <- hclust(as.dist(mut))
group
library(ClassDiscovery)
hcs <- hclust(distanceMatrix(as.matrix(mut), "euclidean"), "ward.D")
group <- cutree(hcs,4)
group
table(grop)
table(group)
dimnames(mut) <- list(paste0("G",1:10),paste0("P",1:100))
group <- cutree(hcs,4); names(group) <- colnames(mut)
group
group <- sort(group)
group
mut <- mut[,names(group)]
phenotype <- data.frame(Subtype = rep(c("A","B","C","D"),table(group)),
row.names = colnames(mut))
phenotype
mut.order <- names(sort(rowSums(mut),decreasing = T))
onco.input <- mut
onco.input[onco.input == 1] <- "Mutated"
onco.input[onco.input != "Mutated"] <- ""
alter_fun = list(
background = function(x, y, w, h) {
grid.rect(x, y, w-unit(0.5, "mm"), h-unit(0.5, "mm"), gp = gpar(fill = "#dcddde", col = "#dcddde"))
},
Mutated = function(x, y, w, h) {
grid.rect(x, y, w-unit(0.5, "mm"), h-unit(0.5, "mm"), gp = gpar(fill = "#A60000", col = "#A60000"))
}
)
my_ann <- phenotype
my_annotation = HeatmapAnnotation(df = my_ann,
col = list(Subtype = c("A" = "red","B" = "green","C" = "blue","D" = "yellow")))
tmp <- as.data.frame(t(mut))
tmp$Subtype <- phenotype$Subtype
pct <- NULL
for (i in mut.order) {
tmp1 <- tmp[,c(i,"Subtype")]
tmp1 <- as.data.frame.array(table(tmp1[,1],tmp1$Subtype))[2,]/sum(tmp1[,1])
pct <- rbind.data.frame(pct,tmp1)
}
rownames(pct) <- mut.order
right_anno <- anno_barplot(as.matrix(pct),which = "row",border = FALSE,gp = gpar(fill = c("red","green","blue","yellow"),border =NA,lty="blank"),height = unit(3, "cm"))
p <- oncoPrint(onco.input[,rownames(my_ann)], # this is the detailed mutation matrix
alter_fun = alter_fun,  # this is the alteration function we already set
bottom_annotation = NULL, # this is the annotation bar which was put bottom
top_annotation = NULL,
column_order = rownames(my_ann), # sort your sample as your subtype order
right_annotation = rowAnnotation(bar3 = right_anno),
row_order = mut.order, # sort mutation as mutation frequency
show_pct = T, #show percentage in left
column_title = "", # no title shown
show_heatmap_legend=T, # show legend in the oncoprint
column_split = my_ann$Subtype,
# some detailed size below and you may not have to change it
column_title_gp = gpar(fontsize = 8),
row_names_gp = gpar(fontsize = 8),
column_names_gp = gpar(fontsize = 8))
p
draw(right_anno)
draw(right_anno)
p
pct
print(pct) # check the percentage
right_anno <- anno_barplot(as.matrix(pct),
which = "row",
border = FALSE,
gp = gpar(fill = c("red","green","blue","yellow"),
border =NA,lty="blank"),height = unit(3, "cm"))
# use draw to plot right annotation
draw(right_anno)
# load R package
library(ComplexHeatmap)
library(ClassDiscovery)
# simulate mutational data
r <- 10
c <- 100
m0 <- matrix(0, r, c)
set.seed(1)
mut <- apply(m0, c(1,2), function(x) sample(c(0,1),1))
dimnames(mut) <- list(paste0("G",1:10),paste0("P",1:100))
# clustering samples
hcs <- hclust(distanceMatrix(as.matrix(mut), "euclidean"), "ward.D")
group <- cutree(hcs,4); names(group) <- colnames(mut)
group <- sort(group)
# re-organize sample and create phenotype
mut <- mut[,names(group)]
phenotype <- data.frame(Subtype = rep(c("A","B","C","D"),table(group)),
row.names = colnames(mut))
# create basic information for oncoprint
mut.order <- names(sort(rowSums(mut),decreasing = T)) # mutational order
onco.input <- mut
onco.input[onco.input == 1] <- "Mutated"
onco.input[onco.input != "Mutated"] <- ""
alter_fun = list(
background = function(x, y, w, h) {
grid.rect(x, y, w-unit(0.5, "mm"), h-unit(0.5, "mm"), gp = gpar(fill = "#dcddde", col = "#dcddde"))
},
Mutated = function(x, y, w, h) {
grid.rect(x, y, w-unit(0.5, "mm"), h-unit(0.5, "mm"), gp = gpar(fill = "#A60000", col = "#A60000"))
}
)
my_ann <- phenotype
my_annotation = HeatmapAnnotation(df = my_ann,
col = list(Subtype = c("A" = "red",
"B" = "green",
"C" = "blue",
"D" = "yellow")))
# create right annotation
tmp <- as.data.frame(t(mut))
tmp$Subtype <- phenotype$Subtype
pct <- NULL
for (i in mut.order) {
tmp1 <- tmp[,c(i,"Subtype")]
tmp1 <- as.data.frame.array(table(tmp1[,1],tmp1$Subtype))[2,]/sum(tmp1[,1])
pct <- rbind.data.frame(pct,tmp1)
}
rownames(pct) <- mut.order
print(pct) # check the percentage and you can see the first one G7 has a high percentage in cluster C
right_anno <- anno_barplot(as.matrix(pct),
which = "row",
border = FALSE,
gp = gpar(fill = c("red","green","blue","yellow"),
border =NA,lty="blank"),height = unit(3, "cm"))
# use draw to plot right annotation
draw(right_anno) # this is correct
# use oncoprint to attach right annotation (which is different from using draw)
p <- oncoPrint(onco.input[,rownames(my_ann)],
alter_fun = alter_fun,
bottom_annotation = NULL,
top_annotation = NULL,
column_order = rownames(my_ann),
right_annotation = rowAnnotation(bar3 = right_anno), # use right annotation
row_order = mut.order,
show_pct = T,
column_title = "",
show_heatmap_legend=T,
column_split = my_ann$Subtype,
column_title_gp = gpar(fontsize = 8),
row_names_gp = gpar(fontsize = 8),
column_names_gp = gpar(fontsize = 8))
p # this is incorrect
# use draw to plot right annotation
draw(right_anno) # this is correct
head(phenotype)
# load R package
library(ComplexHeatmap)
library(ClassDiscovery)
# simulate mutational data
r <- 10
c <- 100
m0 <- matrix(0, r, c)
set.seed(1)
mut <- apply(m0, c(1,2), function(x) sample(c(0,1),1))
dimnames(mut) <- list(paste0("G",1:10),paste0("P",1:100))
# clustering samples
hcs <- hclust(distanceMatrix(as.matrix(mut), "euclidean"), "ward.D")
group <- cutree(hcs,4); names(group) <- colnames(mut)
group <- sort(group)
# re-organize sample and create phenotype
mut <- mut[,names(group)]
phenotype <- data.frame(Subtype = rep(c("A","B","C","D"),table(group)),
row.names = colnames(mut))
head(phenotype)
# Subtype
# P1        A
# P11       A
# P13       A
# P34       A
# P35       A
# P43       A
# create basic information for oncoprint
mut.order <- names(sort(rowSums(mut),decreasing = T)) # mutational order
onco.input <- mut
onco.input[onco.input == 1] <- "Mutated"
onco.input[onco.input != "Mutated"] <- ""
alter_fun = list(
background = function(x, y, w, h) {
grid.rect(x, y, w-unit(0.5, "mm"), h-unit(0.5, "mm"), gp = gpar(fill = "#dcddde", col = "#dcddde"))
},
Mutated = function(x, y, w, h) {
grid.rect(x, y, w-unit(0.5, "mm"), h-unit(0.5, "mm"), gp = gpar(fill = "#A60000", col = "#A60000"))
}
)
my_ann <- phenotype
my_annotation = HeatmapAnnotation(df = my_ann,
col = list(Subtype = c("A" = "red",
"B" = "green",
"C" = "blue",
"D" = "yellow")))
# create right annotation
tmp <- as.data.frame(t(mut))
tmp$Subtype <- phenotype$Subtype
pct <- NULL
for (i in mut.order) {
tmp1 <- tmp[,c(i,"Subtype")]
tmp1 <- as.data.frame.array(table(tmp1[,1],tmp1$Subtype))[2,]/sum(tmp1[,1])
pct <- rbind.data.frame(pct,tmp1)
}
rownames(pct) <- mut.order
print(pct) # check the percentage and you can see the first one G7 has a high percentage in cluster C
# A          B         C          D
# G7  0.03278689 0.21311475 0.6393443 0.11475410
# G9  0.35185185 0.29629630 0.2407407 0.11111111
# G10 0.07407407 0.12962963 0.7037037 0.09259259
# G2  0.37735849 0.01886792 0.4150943 0.18867925
# G4  0.16981132 0.13207547 0.4339623 0.26415094
# G6  0.14000000 0.16000000 0.4200000 0.28000000
# G8  0.19148936 0.34042553 0.2127660 0.25531915
# G1  0.23913043 0.04347826 0.4565217 0.26086957
# G3  0.28571429 0.19047619 0.5238095 0.00000000
# G5  0.21052632 0.07894737 0.4736842 0.23684211
right_anno <- anno_barplot(as.matrix(pct),
which = "row",
border = FALSE,
gp = gpar(fill = c("red","green","blue","yellow"),
border =NA,lty="blank"),height = unit(3, "cm"))
# use draw to plot right annotation
draw(right_anno) # this is correct
# use oncoprint to attach right annotation (which is different from using draw)
p <- oncoPrint(onco.input[,rownames(my_ann)],
alter_fun = alter_fun,
bottom_annotation = NULL,
top_annotation = NULL,
column_order = rownames(my_ann),
right_annotation = rowAnnotation(bar3 = right_anno), # use right annotation
row_order = mut.order,
show_pct = T,
column_title = "",
show_heatmap_legend=T,
column_split = my_ann$Subtype,
column_title_gp = gpar(fontsize = 8),
row_names_gp = gpar(fontsize = 8),
column_names_gp = gpar(fontsize = 8))
p # this is incorrect
install.packages("RankAggreg")
library(RankAggreg)
# rank aggregation without weights
x <- matrix(c("A", "B", "C", "D", "E",
"B", "D", "A", "E", "C",
"B", "A", "E", "C", "D",
"A", "D", "B", "C", "E"), byrow=TRUE, ncol=5)
x
# rank aggregation without weights
x <- matrix(c("A", "B", "C", "D", "E",
"B", "D", "A", "E", "C",
"B", "A", "E", "C", "D",
"A", "D", "B", "C", "E"), byrow=TRUE, ncol=5)
(toplist <- BruteAggreg(x, 5))
toplist
# weighted rank aggregation
set.seed(100)
w <- matrix(rnorm(20), ncol=5)
w <- t(apply(w, 1, sort))
data(geneLists)
View(geneLists)
topGenes <- RankAggreg(geneLists, 25, method="GA", maxIter=100)
plot(topGenes)
topGenes$top.list
topGenes$lists
topGenes$importance
topGenes$top.list
data(geneLists)
topGenes <- RankAggreg(geneLists, k=30, method="GA", maxIter=100)
topGenes <- RankAggreg(geneLists, k=5, method="GA", maxIter=100)
topGenes$top.list
# CS1
tmp1 <- read.table("G:/BLCA_MOVICS/movics_pipeline/Results/consensusMOIC_TCGA-BLCA_deseq2_test_result.CS1_unique_upexpr_marker.txt",sep = "\t",row.names = NULL,header = T,check.names = F,stringsAsFactors = F)
tmp2 <- read.table("G:/BLCA_MOVICS/movics_pipeline/Results/consensusMOIC_TCGA-BLCA_edger_test_result.CS1_unique_upexpr_marker.txt",sep = "\t",row.names = NULL,header = T,check.names = F,stringsAsFactors = F)
tmp3 <- read.table("G:/BLCA_MOVICS/movics_pipeline/Results/consensusMOIC_TCGA-BLCA_limma_test_result.CS1_unique_upexpr_marker.txt",sep = "\t",row.names = NULL,header = T,check.names = F,stringsAsFactors = F)
View(tmp1)
# CS1
tmp1 <- read.table("G:/BLCA_MOVICS/movics_pipeline/Results/consensusMOIC_TCGA-BLCA_deseq2_test_result.CS1_unique_upexpr_marker.txt",sep = "\t",row.names = 1,header = T,check.names = F,stringsAsFactors = F)
tmp2 <- read.table("G:/BLCA_MOVICS/movics_pipeline/Results/consensusMOIC_TCGA-BLCA_edger_test_result.CS1_unique_upexpr_marker.txt",sep = "\t",row.names = 1,header = T,check.names = F,stringsAsFactors = F)
tmp3 <- read.table("G:/BLCA_MOVICS/movics_pipeline/Results/consensusMOIC_TCGA-BLCA_limma_test_result.CS1_unique_upexpr_marker.txt",sep = "\t",row.names = 1,header = T,check.names = F,stringsAsFactors = F)
comgene <- intersect(intersect(rownames(tmp1),rownames(tmp2)),rownames(tmp3))
data(geneLists)
View(geneLists)
rownames(tmp3)
glist=list(rownames(tmp1),
)
glist=list(rownames(tmp1),
rownames(tmp2),
rownames(tmp3))
ups=aggregateRanks(glist = glist, N = 30)
ups=RankAggreg(glist = glist, N = 30)
ups=RankAggreg(x = glist, k = 30)
View(geneLists)
glist=rbind.data.frame(rownames(tmp1)[1:1000],
rownames(tmp2)[1:1000],
rownames(tmp3)[1:1000])
ups=RankAggreg(x = glist, k = 30)
View(glist)
glist=data.frame(deseq2=rownames(tmp1)[1:1000],
edger=rownames(tmp2)[1:1000],
limma=rownames(tmp3)[1:1000])
View(glist)
ups=RankAggreg(x = t(glist), k = 30)
ups=RankAggreg(x = t(glist), k = 30, seed = 19991018, maxIter = 10)
ups
tmp1
table(tmp1$log2fc > 1)
table(tmp1$log2fc > 2)
glist=data.frame(deseq2=rownames(tmp1)[1:200],
edger=rownames(tmp2)[1:200],
limma=rownames(tmp3)[1:200])
ups=RankAggreg(x = t(glist), k = 30, seed = 19991018, maxIter = 10)
ups
write.table(ups,"G:/BLCA_MOVICS/movics_pipeline/Results/rankaggreg_up_CS1.txt",sep = "\t",row.names = F,col.names = F,quote = F)
write.table(ups$top.list,"G:/BLCA_MOVICS/movics_pipeline/Results/rankaggreg_up_CS1.txt",sep = "\t",row.names = F,col.names = F,quote = F)
top.list
library(RankAggreg)
# CS1
tmp1 <- read.table("G:/BLCA_MOVICS/movics_pipeline/Results/consensusMOIC_TCGA-BLCA_deseq2_test_result.CS1_unique_upexpr_marker.txt",sep = "\t",row.names = 1,header = T,check.names = F,stringsAsFactors = F)
tmp2 <- read.table("G:/BLCA_MOVICS/movics_pipeline/Results/consensusMOIC_TCGA-BLCA_edger_test_result.CS1_unique_upexpr_marker.txt",sep = "\t",row.names = 1,header = T,check.names = F,stringsAsFactors = F)
tmp3 <- read.table("G:/BLCA_MOVICS/movics_pipeline/Results/consensusMOIC_TCGA-BLCA_limma_test_result.CS1_unique_upexpr_marker.txt",sep = "\t",row.names = 1,header = T,check.names = F,stringsAsFactors = F)
glist=data.frame(deseq2=rownames(tmp1)[1:200],
edger=rownames(tmp2)[1:200],
limma=rownames(tmp3)[1:200])
rankaggreg.cs1=RankAggreg(x = t(glist), k = 30, seed = 19991018, maxIter = 1000)
save(rankaggreg.cs1,file = "G:/BLCA_MOVICS/movics_pipeline/Results/rankaggreg.cs1.RData")
library(RankAggreg)
# CS1
tmp1 <- read.table("G:/BLCA_MOVICS/movics_pipeline/Results/consensusMOIC_TCGA-BLCA_deseq2_test_result.CS1_unique_upexpr_marker.txt",sep = "\t",row.names = 1,header = T,check.names = F,stringsAsFactors = F)
tmp2 <- read.table("G:/BLCA_MOVICS/movics_pipeline/Results/consensusMOIC_TCGA-BLCA_edger_test_result.CS1_unique_upexpr_marker.txt",sep = "\t",row.names = 1,header = T,check.names = F,stringsAsFactors = F)
tmp3 <- read.table("G:/BLCA_MOVICS/movics_pipeline/Results/consensusMOIC_TCGA-BLCA_limma_test_result.CS1_unique_upexpr_marker.txt",sep = "\t",row.names = 1,header = T,check.names = F,stringsAsFactors = F)
glist=data.frame(deseq2=rownames(tmp1)[1:200],
edger=rownames(tmp2)[1:200],
limma=rownames(tmp3)[1:200])
rankaggreg.cs1=RankAggreg(x = t(glist), k = 30, seed = 19991018, maxIter = 1000)
save(rankaggreg.cs1,file = "G:/BLCA_MOVICS/movics_pipeline/Results/rankaggreg.cs1.RData")
library(RankAggreg)
# CS1
tmp1 <- read.table("G:/BLCA_MOVICS/movics_pipeline/Results/consensusMOIC_TCGA-BLCA_deseq2_test_result.CS1_unique_upexpr_marker.txt",sep = "\t",row.names = 1,header = T,check.names = F,stringsAsFactors = F)
tmp2 <- read.table("G:/BLCA_MOVICS/movics_pipeline/Results/consensusMOIC_TCGA-BLCA_edger_test_result.CS1_unique_upexpr_marker.txt",sep = "\t",row.names = 1,header = T,check.names = F,stringsAsFactors = F)
tmp3 <- read.table("G:/BLCA_MOVICS/movics_pipeline/Results/consensusMOIC_TCGA-BLCA_limma_test_result.CS1_unique_upexpr_marker.txt",sep = "\t",row.names = 1,header = T,check.names = F,stringsAsFactors = F)
glist=data.frame(deseq2=rownames(tmp1)[1:1000],
edger=rownames(tmp2)[1:1000],
limma=rownames(tmp3)[1:1000])
rankaggreg.cs1=RankAggreg(x = t(glist), k = 30, seed = 19991018, maxIter = 1000)
save(rankaggreg.cs1,file = "G:/BLCA_MOVICS/movics_pipeline/Results/rankaggreg.cs1.RData")
devtools::install_github("xlucpu/refineMIBC")
Sys.setenv("R_REMOTES_NO_ERRORS_FROM_WARNINGS" = "true")
devtools::install_github("xlucpu/refineMIBC")
devtools::install_github("xlucpu/refineMIBC")
library(refineMIBC)
library(devtools)
library(roxygen2)
library(usethis)
workdir <- "G:/BLCA_MOVICS/Rpackage"; setwd(workdir)
devtools::document(pkg="G:/BLCA_MOVICS/Rpackage/refineMIBC")
workdir <- "G:/BLCA_MOVICS/Rpackage/refineMIBC"; setwd(workdir)
system('R CMD Rd2pdf G:/BLCA_MOVICS/Rpackage/refineMIBC')
workdir <- "G:/BLCA_MOVICS/Rpackage"; setwd(workdir)
devtools::document(pkg="G:/BLCA_MOVICS/Rpackage/refineMIBC")
workdir <- "G:/BLCA_MOVICS/Rpackage"; setwd(workdir)
devtools::document(pkg="G:/BLCA_MOVICS/Rpackage/refineMIBC")
devtools::document(pkg="G:/BLCA_MOVICS/Rpackage/refineMIBC")
workdir <- "G:/BLCA_MOVICS/Rpackage/refineMIBC"; setwd(workdir)
system('R CMD Rd2pdf G:/BLCA_MOVICS/Rpackage/refineMIBC')
system('R CMD Rd2pdf G:/BLCA_MOVICS/Rpackage/refineMIBC')
